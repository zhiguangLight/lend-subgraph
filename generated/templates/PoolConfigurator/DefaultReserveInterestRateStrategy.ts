// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DefaultReserveInterestRateStrategy__calculateInterestRatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class DefaultReserveInterestRateStrategy__calculateInterestRatesInputParamsStruct extends ethereum.Tuple {
  get unbacked(): BigInt {
    return this[0].toBigInt();
  }

  get liquidityAdded(): BigInt {
    return this[1].toBigInt();
  }

  get liquidityTaken(): BigInt {
    return this[2].toBigInt();
  }

  get totalStableDebt(): BigInt {
    return this[3].toBigInt();
  }

  get totalVariableDebt(): BigInt {
    return this[4].toBigInt();
  }

  get averageStableBorrowRate(): BigInt {
    return this[5].toBigInt();
  }

  get reserveFactor(): BigInt {
    return this[6].toBigInt();
  }

  get reserve(): Address {
    return this[7].toAddress();
  }

  get aToken(): Address {
    return this[8].toAddress();
  }
}

export class DefaultReserveInterestRateStrategy extends ethereum.SmartContract {
  static bind(address: Address): DefaultReserveInterestRateStrategy {
    return new DefaultReserveInterestRateStrategy(
      "DefaultReserveInterestRateStrategy",
      address
    );
  }

  ADDRESSES_PROVIDER(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO(): BigInt {
    let result = super.call(
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO",
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO",
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_EXCESS_USAGE_RATIO(): BigInt {
    let result = super.call(
      "MAX_EXCESS_USAGE_RATIO",
      "MAX_EXCESS_USAGE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_EXCESS_USAGE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_EXCESS_USAGE_RATIO",
      "MAX_EXCESS_USAGE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO(): BigInt {
    let result = super.call(
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPTIMAL_USAGE_RATIO(): BigInt {
    let result = super.call(
      "OPTIMAL_USAGE_RATIO",
      "OPTIMAL_USAGE_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_OPTIMAL_USAGE_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "OPTIMAL_USAGE_RATIO",
      "OPTIMAL_USAGE_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateInterestRates(
    params: DefaultReserveInterestRateStrategy__calculateInterestRatesInputParamsStruct
  ): DefaultReserveInterestRateStrategy__calculateInterestRatesResult {
    let result = super.call(
      "calculateInterestRates",
      "calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new DefaultReserveInterestRateStrategy__calculateInterestRatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateInterestRates(
    params: DefaultReserveInterestRateStrategy__calculateInterestRatesInputParamsStruct
  ): ethereum.CallResult<
    DefaultReserveInterestRateStrategy__calculateInterestRatesResult
  > {
    let result = super.tryCall(
      "calculateInterestRates",
      "calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DefaultReserveInterestRateStrategy__calculateInterestRatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getBaseStableBorrowRate(): BigInt {
    let result = super.call(
      "getBaseStableBorrowRate",
      "getBaseStableBorrowRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseStableBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseStableBorrowRate",
      "getBaseStableBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseVariableBorrowRate(): BigInt {
    let result = super.call(
      "getBaseVariableBorrowRate",
      "getBaseVariableBorrowRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseVariableBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseVariableBorrowRate",
      "getBaseVariableBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxVariableBorrowRate(): BigInt {
    let result = super.call(
      "getMaxVariableBorrowRate",
      "getMaxVariableBorrowRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxVariableBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxVariableBorrowRate",
      "getMaxVariableBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableRateExcessOffset(): BigInt {
    let result = super.call(
      "getStableRateExcessOffset",
      "getStableRateExcessOffset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableRateExcessOffset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableRateExcessOffset",
      "getStableRateExcessOffset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableRateSlope1(): BigInt {
    let result = super.call(
      "getStableRateSlope1",
      "getStableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableRateSlope1",
      "getStableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStableRateSlope2(): BigInt {
    let result = super.call(
      "getStableRateSlope2",
      "getStableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStableRateSlope2",
      "getStableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVariableRateSlope1(): BigInt {
    let result = super.call(
      "getVariableRateSlope1",
      "getVariableRateSlope1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVariableRateSlope1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVariableRateSlope1",
      "getVariableRateSlope1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVariableRateSlope2(): BigInt {
    let result = super.call(
      "getVariableRateSlope2",
      "getVariableRateSlope2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVariableRateSlope2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVariableRateSlope2",
      "getVariableRateSlope2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get optimalUsageRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get baseVariableBorrowRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get variableRateSlope1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get variableRateSlope2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get stableRateSlope1(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get stableRateSlope2(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get baseStableRateOffset(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get stableRateExcessOffset(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get optimalStableToTotalDebtRatio(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
