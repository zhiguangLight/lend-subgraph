// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Accrued extends ethereum.Event {
  get params(): Accrued__Params {
    return new Accrued__Params(this);
  }
}

export class Accrued__Params {
  _event: Accrued;

  constructor(event: Accrued) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assetIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get userIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardsAccrued(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class AssetConfigUpdated extends ethereum.Event {
  get params(): AssetConfigUpdated__Params {
    return new AssetConfigUpdated__Params(this);
  }
}

export class AssetConfigUpdated__Params {
  _event: AssetConfigUpdated;

  constructor(event: AssetConfigUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldEmission(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newEmission(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get oldDistributionEnd(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newDistributionEnd(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get assetIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ClaimerSet extends ethereum.Event {
  get params(): ClaimerSet__Params {
    return new ClaimerSet__Params(this);
  }
}

export class ClaimerSet__Params {
  _event: ClaimerSet;

  constructor(event: ClaimerSet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EmissionManagerUpdated extends ethereum.Event {
  get params(): EmissionManagerUpdated__Params {
    return new EmissionManagerUpdated__Params(this);
  }
}

export class EmissionManagerUpdated__Params {
  _event: EmissionManagerUpdated;

  constructor(event: EmissionManagerUpdated) {
    this._event = event;
  }

  get oldEmissionManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newEmissionManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardOracleUpdated extends ethereum.Event {
  get params(): RewardOracleUpdated__Params {
    return new RewardOracleUpdated__Params(this);
  }
}

export class RewardOracleUpdated__Params {
  _event: RewardOracleUpdated;

  constructor(event: RewardOracleUpdated) {
    this._event = event;
  }

  get reward(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferStrategyInstalled extends ethereum.Event {
  get params(): TransferStrategyInstalled__Params {
    return new TransferStrategyInstalled__Params(this);
  }
}

export class TransferStrategyInstalled__Params {
  _event: TransferStrategyInstalled;

  constructor(event: TransferStrategyInstalled) {
    this._event = event;
  }

  get reward(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferStrategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardsController__claimAllRewardsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRewardsList(): Array<Address> {
    return this.value0;
  }

  getClaimedAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class RewardsController__claimAllRewardsOnBehalfResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRewardsList(): Array<Address> {
    return this.value0;
  }

  getClaimedAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class RewardsController__claimAllRewardsToSelfResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRewardsList(): Array<Address> {
    return this.value0;
  }

  getClaimedAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class RewardsController__getAllUserRewardsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRewardsList(): Array<Address> {
    return this.value0;
  }

  getUnclaimedAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class RewardsController__getRewardsDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class RewardsController extends ethereum.SmartContract {
  static bind(address: Address): RewardsController {
    return new RewardsController("RewardsController", address);
  }

  REVISION(): BigInt {
    let result = super.call("REVISION", "REVISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REVISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("REVISION", "REVISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimAllRewards(
    assets: Array<Address>,
    to: Address
  ): RewardsController__claimAllRewardsResult {
    let result = super.call(
      "claimAllRewards",
      "claimAllRewards(address[],address):(address[],uint256[])",
      [ethereum.Value.fromAddressArray(assets), ethereum.Value.fromAddress(to)]
    );

    return new RewardsController__claimAllRewardsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_claimAllRewards(
    assets: Array<Address>,
    to: Address
  ): ethereum.CallResult<RewardsController__claimAllRewardsResult> {
    let result = super.tryCall(
      "claimAllRewards",
      "claimAllRewards(address[],address):(address[],uint256[])",
      [ethereum.Value.fromAddressArray(assets), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsController__claimAllRewardsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  claimAllRewardsOnBehalf(
    assets: Array<Address>,
    user: Address,
    to: Address
  ): RewardsController__claimAllRewardsOnBehalfResult {
    let result = super.call(
      "claimAllRewardsOnBehalf",
      "claimAllRewardsOnBehalf(address[],address,address):(address[],uint256[])",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(to)
      ]
    );

    return new RewardsController__claimAllRewardsOnBehalfResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_claimAllRewardsOnBehalf(
    assets: Array<Address>,
    user: Address,
    to: Address
  ): ethereum.CallResult<RewardsController__claimAllRewardsOnBehalfResult> {
    let result = super.tryCall(
      "claimAllRewardsOnBehalf",
      "claimAllRewardsOnBehalf(address[],address,address):(address[],uint256[])",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsController__claimAllRewardsOnBehalfResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  claimAllRewardsToSelf(
    assets: Array<Address>
  ): RewardsController__claimAllRewardsToSelfResult {
    let result = super.call(
      "claimAllRewardsToSelf",
      "claimAllRewardsToSelf(address[]):(address[],uint256[])",
      [ethereum.Value.fromAddressArray(assets)]
    );

    return new RewardsController__claimAllRewardsToSelfResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_claimAllRewardsToSelf(
    assets: Array<Address>
  ): ethereum.CallResult<RewardsController__claimAllRewardsToSelfResult> {
    let result = super.tryCall(
      "claimAllRewardsToSelf",
      "claimAllRewardsToSelf(address[]):(address[],uint256[])",
      [ethereum.Value.fromAddressArray(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsController__claimAllRewardsToSelfResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  claimRewards(
    assets: Array<Address>,
    amount: BigInt,
    to: Address,
    reward: Address
  ): BigInt {
    let result = super.call(
      "claimRewards",
      "claimRewards(address[],uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewards(
    assets: Array<Address>,
    amount: BigInt,
    to: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewards",
      "claimRewards(address[],uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardsOnBehalf(
    assets: Array<Address>,
    amount: BigInt,
    user: Address,
    to: Address,
    reward: Address
  ): BigInt {
    let result = super.call(
      "claimRewardsOnBehalf",
      "claimRewardsOnBehalf(address[],uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardsOnBehalf(
    assets: Array<Address>,
    amount: BigInt,
    user: Address,
    to: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardsOnBehalf",
      "claimRewardsOnBehalf(address[],uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewardsToSelf(
    assets: Array<Address>,
    amount: BigInt,
    reward: Address
  ): BigInt {
    let result = super.call(
      "claimRewardsToSelf",
      "claimRewardsToSelf(address[],uint256,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewardsToSelf(
    assets: Array<Address>,
    amount: BigInt,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimRewardsToSelf",
      "claimRewardsToSelf(address[],uint256,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllUserRewards(
    assets: Array<Address>,
    user: Address
  ): RewardsController__getAllUserRewardsResult {
    let result = super.call(
      "getAllUserRewards",
      "getAllUserRewards(address[],address):(address[],uint256[])",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new RewardsController__getAllUserRewardsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getAllUserRewards(
    assets: Array<Address>,
    user: Address
  ): ethereum.CallResult<RewardsController__getAllUserRewardsResult> {
    let result = super.tryCall(
      "getAllUserRewards",
      "getAllUserRewards(address[],address):(address[],uint256[])",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsController__getAllUserRewardsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getAssetDecimals(asset: Address): i32 {
    let result = super.call(
      "getAssetDecimals",
      "getAssetDecimals(address):(uint8)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toI32();
  }

  try_getAssetDecimals(asset: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAssetDecimals",
      "getAssetDecimals(address):(uint8)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getClaimer(user: Address): Address {
    let result = super.call("getClaimer", "getClaimer(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getClaimer(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getClaimer", "getClaimer(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDistributionEnd(asset: Address, reward: Address): BigInt {
    let result = super.call(
      "getDistributionEnd",
      "getDistributionEnd(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(reward)]
    );

    return result[0].toBigInt();
  }

  try_getDistributionEnd(
    asset: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDistributionEnd",
      "getDistributionEnd(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(reward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEmissionManager(): Address {
    let result = super.call(
      "getEmissionManager",
      "getEmissionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEmissionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEmissionManager",
      "getEmissionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRewardOracle(reward: Address): Address {
    let result = super.call(
      "getRewardOracle",
      "getRewardOracle(address):(address)",
      [ethereum.Value.fromAddress(reward)]
    );

    return result[0].toAddress();
  }

  try_getRewardOracle(reward: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRewardOracle",
      "getRewardOracle(address):(address)",
      [ethereum.Value.fromAddress(reward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRewardsByAsset(asset: Address): Array<Address> {
    let result = super.call(
      "getRewardsByAsset",
      "getRewardsByAsset(address):(address[])",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toAddressArray();
  }

  try_getRewardsByAsset(asset: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardsByAsset",
      "getRewardsByAsset(address):(address[])",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRewardsData(
    asset: Address,
    reward: Address
  ): RewardsController__getRewardsDataResult {
    let result = super.call(
      "getRewardsData",
      "getRewardsData(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(reward)]
    );

    return new RewardsController__getRewardsDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getRewardsData(
    asset: Address,
    reward: Address
  ): ethereum.CallResult<RewardsController__getRewardsDataResult> {
    let result = super.tryCall(
      "getRewardsData",
      "getRewardsData(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(reward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsController__getRewardsDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getRewardsList(): Array<Address> {
    let result = super.call(
      "getRewardsList",
      "getRewardsList():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardsList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardsList",
      "getRewardsList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTransferStrategy(reward: Address): Address {
    let result = super.call(
      "getTransferStrategy",
      "getTransferStrategy(address):(address)",
      [ethereum.Value.fromAddress(reward)]
    );

    return result[0].toAddress();
  }

  try_getTransferStrategy(reward: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTransferStrategy",
      "getTransferStrategy(address):(address)",
      [ethereum.Value.fromAddress(reward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserAccruedRewards(user: Address, reward: Address): BigInt {
    let result = super.call(
      "getUserAccruedRewards",
      "getUserAccruedRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(reward)]
    );

    return result[0].toBigInt();
  }

  try_getUserAccruedRewards(
    user: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserAccruedRewards",
      "getUserAccruedRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(reward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserAssetIndex(user: Address, asset: Address, reward: Address): BigInt {
    let result = super.call(
      "getUserAssetIndex",
      "getUserAssetIndex(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserAssetIndex(
    user: Address,
    asset: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserAssetIndex",
      "getUserAssetIndex(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserRewards(
    assets: Array<Address>,
    user: Address,
    reward: Address
  ): BigInt {
    let result = super.call(
      "getUserRewards",
      "getUserRewards(address[],address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(reward)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserRewards(
    assets: Array<Address>,
    user: Address,
    reward: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserRewards",
      "getUserRewards(address[],address,address):(uint256)",
      [
        ethereum.Value.fromAddressArray(assets),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(reward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get emissionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimAllRewardsCall extends ethereum.Call {
  get inputs(): ClaimAllRewardsCall__Inputs {
    return new ClaimAllRewardsCall__Inputs(this);
  }

  get outputs(): ClaimAllRewardsCall__Outputs {
    return new ClaimAllRewardsCall__Outputs(this);
  }
}

export class ClaimAllRewardsCall__Inputs {
  _call: ClaimAllRewardsCall;

  constructor(call: ClaimAllRewardsCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimAllRewardsCall__Outputs {
  _call: ClaimAllRewardsCall;

  constructor(call: ClaimAllRewardsCall) {
    this._call = call;
  }

  get rewardsList(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get claimedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class ClaimAllRewardsOnBehalfCall extends ethereum.Call {
  get inputs(): ClaimAllRewardsOnBehalfCall__Inputs {
    return new ClaimAllRewardsOnBehalfCall__Inputs(this);
  }

  get outputs(): ClaimAllRewardsOnBehalfCall__Outputs {
    return new ClaimAllRewardsOnBehalfCall__Outputs(this);
  }
}

export class ClaimAllRewardsOnBehalfCall__Inputs {
  _call: ClaimAllRewardsOnBehalfCall;

  constructor(call: ClaimAllRewardsOnBehalfCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimAllRewardsOnBehalfCall__Outputs {
  _call: ClaimAllRewardsOnBehalfCall;

  constructor(call: ClaimAllRewardsOnBehalfCall) {
    this._call = call;
  }

  get rewardsList(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get claimedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class ClaimAllRewardsToSelfCall extends ethereum.Call {
  get inputs(): ClaimAllRewardsToSelfCall__Inputs {
    return new ClaimAllRewardsToSelfCall__Inputs(this);
  }

  get outputs(): ClaimAllRewardsToSelfCall__Outputs {
    return new ClaimAllRewardsToSelfCall__Outputs(this);
  }
}

export class ClaimAllRewardsToSelfCall__Inputs {
  _call: ClaimAllRewardsToSelfCall;

  constructor(call: ClaimAllRewardsToSelfCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimAllRewardsToSelfCall__Outputs {
  _call: ClaimAllRewardsToSelfCall;

  constructor(call: ClaimAllRewardsToSelfCall) {
    this._call = call;
  }

  get rewardsList(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get claimedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get reward(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRewardsOnBehalfCall extends ethereum.Call {
  get inputs(): ClaimRewardsOnBehalfCall__Inputs {
    return new ClaimRewardsOnBehalfCall__Inputs(this);
  }

  get outputs(): ClaimRewardsOnBehalfCall__Outputs {
    return new ClaimRewardsOnBehalfCall__Outputs(this);
  }
}

export class ClaimRewardsOnBehalfCall__Inputs {
  _call: ClaimRewardsOnBehalfCall;

  constructor(call: ClaimRewardsOnBehalfCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reward(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ClaimRewardsOnBehalfCall__Outputs {
  _call: ClaimRewardsOnBehalfCall;

  constructor(call: ClaimRewardsOnBehalfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimRewardsToSelfCall extends ethereum.Call {
  get inputs(): ClaimRewardsToSelfCall__Inputs {
    return new ClaimRewardsToSelfCall__Inputs(this);
  }

  get outputs(): ClaimRewardsToSelfCall__Outputs {
    return new ClaimRewardsToSelfCall__Outputs(this);
  }
}

export class ClaimRewardsToSelfCall__Inputs {
  _call: ClaimRewardsToSelfCall;

  constructor(call: ClaimRewardsToSelfCall) {
    this._call = call;
  }

  get assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reward(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimRewardsToSelfCall__Outputs {
  _call: ClaimRewardsToSelfCall;

  constructor(call: ClaimRewardsToSelfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConfigureAssetsCall extends ethereum.Call {
  get inputs(): ConfigureAssetsCall__Inputs {
    return new ConfigureAssetsCall__Inputs(this);
  }

  get outputs(): ConfigureAssetsCall__Outputs {
    return new ConfigureAssetsCall__Outputs(this);
  }
}

export class ConfigureAssetsCall__Inputs {
  _call: ConfigureAssetsCall;

  constructor(call: ConfigureAssetsCall) {
    this._call = call;
  }

  get config(): Array<ConfigureAssetsCallConfigStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ConfigureAssetsCallConfigStruct
    >();
  }
}

export class ConfigureAssetsCall__Outputs {
  _call: ConfigureAssetsCall;

  constructor(call: ConfigureAssetsCall) {
    this._call = call;
  }
}

export class ConfigureAssetsCallConfigStruct extends ethereum.Tuple {
  get emissionPerSecond(): BigInt {
    return this[0].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[1].toBigInt();
  }

  get distributionEnd(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get reward(): Address {
    return this[4].toAddress();
  }

  get transferStrategy(): Address {
    return this[5].toAddress();
  }

  get rewardOracle(): Address {
    return this[6].toAddress();
  }
}

export class HandleActionCall extends ethereum.Call {
  get inputs(): HandleActionCall__Inputs {
    return new HandleActionCall__Inputs(this);
  }

  get outputs(): HandleActionCall__Outputs {
    return new HandleActionCall__Outputs(this);
  }
}

export class HandleActionCall__Inputs {
  _call: HandleActionCall;

  constructor(call: HandleActionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get totalSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get userBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class HandleActionCall__Outputs {
  _call: HandleActionCall;

  constructor(call: HandleActionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get emissionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetClaimerCall extends ethereum.Call {
  get inputs(): SetClaimerCall__Inputs {
    return new SetClaimerCall__Inputs(this);
  }

  get outputs(): SetClaimerCall__Outputs {
    return new SetClaimerCall__Outputs(this);
  }
}

export class SetClaimerCall__Inputs {
  _call: SetClaimerCall;

  constructor(call: SetClaimerCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetClaimerCall__Outputs {
  _call: SetClaimerCall;

  constructor(call: SetClaimerCall) {
    this._call = call;
  }
}

export class SetDistributionEndCall extends ethereum.Call {
  get inputs(): SetDistributionEndCall__Inputs {
    return new SetDistributionEndCall__Inputs(this);
  }

  get outputs(): SetDistributionEndCall__Outputs {
    return new SetDistributionEndCall__Outputs(this);
  }
}

export class SetDistributionEndCall__Inputs {
  _call: SetDistributionEndCall;

  constructor(call: SetDistributionEndCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reward(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newDistributionEnd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDistributionEndCall__Outputs {
  _call: SetDistributionEndCall;

  constructor(call: SetDistributionEndCall) {
    this._call = call;
  }
}

export class SetEmissionManagerCall extends ethereum.Call {
  get inputs(): SetEmissionManagerCall__Inputs {
    return new SetEmissionManagerCall__Inputs(this);
  }

  get outputs(): SetEmissionManagerCall__Outputs {
    return new SetEmissionManagerCall__Outputs(this);
  }
}

export class SetEmissionManagerCall__Inputs {
  _call: SetEmissionManagerCall;

  constructor(call: SetEmissionManagerCall) {
    this._call = call;
  }

  get emissionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmissionManagerCall__Outputs {
  _call: SetEmissionManagerCall;

  constructor(call: SetEmissionManagerCall) {
    this._call = call;
  }
}

export class SetEmissionPerSecondCall extends ethereum.Call {
  get inputs(): SetEmissionPerSecondCall__Inputs {
    return new SetEmissionPerSecondCall__Inputs(this);
  }

  get outputs(): SetEmissionPerSecondCall__Outputs {
    return new SetEmissionPerSecondCall__Outputs(this);
  }
}

export class SetEmissionPerSecondCall__Inputs {
  _call: SetEmissionPerSecondCall;

  constructor(call: SetEmissionPerSecondCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewards(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get newEmissionsPerSecond(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SetEmissionPerSecondCall__Outputs {
  _call: SetEmissionPerSecondCall;

  constructor(call: SetEmissionPerSecondCall) {
    this._call = call;
  }
}

export class SetRewardOracleCall extends ethereum.Call {
  get inputs(): SetRewardOracleCall__Inputs {
    return new SetRewardOracleCall__Inputs(this);
  }

  get outputs(): SetRewardOracleCall__Outputs {
    return new SetRewardOracleCall__Outputs(this);
  }
}

export class SetRewardOracleCall__Inputs {
  _call: SetRewardOracleCall;

  constructor(call: SetRewardOracleCall) {
    this._call = call;
  }

  get reward(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetRewardOracleCall__Outputs {
  _call: SetRewardOracleCall;

  constructor(call: SetRewardOracleCall) {
    this._call = call;
  }
}

export class SetTransferStrategyCall extends ethereum.Call {
  get inputs(): SetTransferStrategyCall__Inputs {
    return new SetTransferStrategyCall__Inputs(this);
  }

  get outputs(): SetTransferStrategyCall__Outputs {
    return new SetTransferStrategyCall__Outputs(this);
  }
}

export class SetTransferStrategyCall__Inputs {
  _call: SetTransferStrategyCall;

  constructor(call: SetTransferStrategyCall) {
    this._call = call;
  }

  get reward(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTransferStrategyCall__Outputs {
  _call: SetTransferStrategyCall;

  constructor(call: SetTransferStrategyCall) {
    this._call = call;
  }
}
